//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace iTec_uwp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace iTec_uwp.iTec_uwp_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[40];
            _typeNameTable[0] = "iTec_uwp.HomePage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "iTec_uwp.MainPage";
            _typeNameTable[4] = "OxyPlot.Windows.PlotView";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "OxyPlot.PlotModel";
            _typeNameTable[7] = "OxyPlot.Model";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "OxyPlot.IPlotController";
            _typeNameTable[10] = "Windows.UI.Xaml.Controls.ControlTemplate";
            _typeNameTable[11] = "Boolean";
            _typeNameTable[12] = "System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>";
            _typeNameTable[13] = "System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>";
            _typeNameTable[14] = "OxyPlot.Windows.TrackerDefinition";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "String";
            _typeNameTable[17] = "OxyPlot.OxyRect";
            _typeNameTable[18] = "System.ValueType";
            _typeNameTable[19] = "iTec_uwp.PressureDisplayPage";
            _typeNameTable[20] = "Int32";
            _typeNameTable[21] = "iTec_uwp.QRcodePage";
            _typeNameTable[22] = "iTec_uwp.RawDataPage";
            _typeNameTable[23] = "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.ProgressBar";
            _typeNameTable[25] = "Double";
            _typeNameTable[26] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[27] = "iTec_uwp.Sensor1_Page";
            _typeNameTable[28] = "iTec_uwp.Sensor2_Page";
            _typeNameTable[29] = "iTec_uwp.Sensor3_Page";
            _typeNameTable[30] = "iTec_uwp.StartPage";
            _typeNameTable[31] = "iTec_uwp.UART_TestPage";
            _typeNameTable[32] = "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[34] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[35] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[36] = "System.Nullable`1<Boolean>";
            _typeNameTable[37] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[38] = "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool";
            _typeNameTable[39] = "Windows.UI.Xaml.Markup.MarkupExtension";

            _typeTable = new global::System.Type[40];
            _typeTable[0] = typeof(global::iTec_uwp.HomePage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::iTec_uwp.MainPage);
            _typeTable[4] = typeof(global::OxyPlot.Windows.PlotView);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::OxyPlot.PlotModel);
            _typeTable[7] = typeof(global::OxyPlot.Model);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::OxyPlot.IPlotController);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Controls.ControlTemplate);
            _typeTable[11] = typeof(global::System.Boolean);
            _typeTable[12] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OxyPlot.Windows.TrackerDefinition>);
            _typeTable[13] = typeof(global::System.Collections.ObjectModel.Collection<global::OxyPlot.Windows.TrackerDefinition>);
            _typeTable[14] = typeof(global::OxyPlot.Windows.TrackerDefinition);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::System.String);
            _typeTable[17] = typeof(global::OxyPlot.OxyRect);
            _typeTable[18] = typeof(global::System.ValueType);
            _typeTable[19] = typeof(global::iTec_uwp.PressureDisplayPage);
            _typeTable[20] = typeof(global::System.Int32);
            _typeTable[21] = typeof(global::iTec_uwp.QRcodePage);
            _typeTable[22] = typeof(global::iTec_uwp.RawDataPage);
            _typeTable[23] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.ProgressBar);
            _typeTable[25] = typeof(global::System.Double);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[27] = typeof(global::iTec_uwp.Sensor1_Page);
            _typeTable[28] = typeof(global::iTec_uwp.Sensor2_Page);
            _typeTable[29] = typeof(global::iTec_uwp.Sensor3_Page);
            _typeTable[30] = typeof(global::iTec_uwp.StartPage);
            _typeTable[31] = typeof(global::iTec_uwp.UART_TestPage);
            _typeTable[32] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[35] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[36] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[38] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Markup.MarkupExtension);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_HomePage() { return new global::iTec_uwp.HomePage(); }
        private object Activate_3_MainPage() { return new global::iTec_uwp.MainPage(); }
        private object Activate_4_PlotView() { return new global::OxyPlot.Windows.PlotView(); }
        private object Activate_6_PlotModel() { return new global::OxyPlot.PlotModel(); }
        private object Activate_12_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OxyPlot.Windows.TrackerDefinition>(); }
        private object Activate_13_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OxyPlot.Windows.TrackerDefinition>(); }
        private object Activate_14_TrackerDefinition() { return new global::OxyPlot.Windows.TrackerDefinition(); }
        private object Activate_19_PressureDisplayPage() { return new global::iTec_uwp.PressureDisplayPage(); }
        private object Activate_21_QRcodePage() { return new global::iTec_uwp.QRcodePage(); }
        private object Activate_22_RawDataPage() { return new global::iTec_uwp.RawDataPage(); }
        private object Activate_23_RadialProgressBar() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar(); }
        private object Activate_27_Sensor1_Page() { return new global::iTec_uwp.Sensor1_Page(); }
        private object Activate_28_Sensor2_Page() { return new global::iTec_uwp.Sensor2_Page(); }
        private object Activate_29_Sensor3_Page() { return new global::iTec_uwp.Sensor3_Page(); }
        private object Activate_30_StartPage() { return new global::iTec_uwp.StartPage(); }
        private object Activate_31_UART_TestPage() { return new global::iTec_uwp.UART_TestPage(); }
        private object Activate_32_UniformGrid() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid(); }
        private object Activate_38_NullableBool() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool(); }
        private void VectorAdd_12_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OxyPlot.Windows.TrackerDefinition>)instance;
            var newItem = (global::OxyPlot.Windows.TrackerDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_13_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OxyPlot.Windows.TrackerDefinition>)instance;
            var newItem = (global::OxyPlot.Windows.TrackerDefinition)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  iTec_uwp.HomePage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_HomePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  iTec_uwp.MainPage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  OxyPlot.Windows.PlotView
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_PlotView;
                userType.AddMemberName("Model");
                userType.AddMemberName("Controller");
                userType.AddMemberName("DefaultTrackerTemplate");
                userType.AddMemberName("HandleRightClicks");
                userType.AddMemberName("IsMouseWheelEnabled");
                userType.AddMemberName("ZoomRectangleTemplate");
                userType.AddMemberName("TrackerDefinitions");
                userType.AddMemberName("ActualModel");
                userType.AddMemberName("ClientArea");
                userType.AddMemberName("ActualController");
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  OxyPlot.PlotModel
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("OxyPlot.Model"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  OxyPlot.Model
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  OxyPlot.IPlotController
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.Controls.ControlTemplate
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Boolean
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>"));
                userType.CollectionAdd = VectorAdd_12_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_Collection;
                userType.CollectionAdd = VectorAdd_13_Collection;
                xamlType = userType;
                break;

            case 14:   //  OxyPlot.Windows.TrackerDefinition
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_14_TrackerDefinition;
                userType.AddMemberName("TrackerKey");
                userType.AddMemberName("TrackerTemplate");
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  String
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  OxyPlot.OxyRect
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  System.ValueType
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  iTec_uwp.PressureDisplayPage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_PressureDisplayPage;
                userType.AddMemberName("GripRightPoint_1");
                userType.AddMemberName("GripRightPoint_2");
                userType.AddMemberName("GripRightPoint_3");
                userType.AddMemberName("GripRightPoint_4");
                userType.AddMemberName("GripLeftPoint_5");
                userType.AddMemberName("GripLeftPoint_6");
                userType.AddMemberName("GripLeftPoint_7");
                userType.AddMemberName("GripLeftPoint_8");
                userType.AddMemberName("GripLeft");
                userType.AddMemberName("GripRight");
                userType.AddMemberName("Seat");
                userType.AddMemberName("PedalLeft");
                userType.AddMemberName("PedalRight");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Int32
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  iTec_uwp.QRcodePage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_QRcodePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  iTec_uwp.RawDataPage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_RawDataPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ProgressBar"));
                userType.Activator = Activate_23_RadialProgressBar;
                userType.AddMemberName("Thickness");
                userType.AddMemberName("Outline");
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.ProgressBar
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Double
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  iTec_uwp.Sensor1_Page
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_Sensor1_Page;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  iTec_uwp.Sensor2_Page
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_Sensor2_Page;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  iTec_uwp.Sensor3_Page
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_Sensor3_Page;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  iTec_uwp.StartPage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_StartPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  iTec_uwp.UART_TestPage
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_UART_TestPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_32_UniformGrid;
                userType.AddMemberName("Columns");
                userType.AddMemberName("FirstColumn");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("Rows");
                userType.AddMemberName("AutoLayout");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 33:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  System.Nullable`1<Boolean>
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool
                userType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_38_NullableBool;
                userType.AddMemberName("Value");
                userType.AddMemberName("IsNull");
                userType.SetIsBindable();
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Markup.MarkupExtension
                xamlType = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_DataGrid_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Microsoft_Toolkit_Uwp_UI_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::OxyPlot.Windows.OxyPlot_Windows10_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_PlotView_Model(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.Model;
        }
        private void set_0_PlotView_Model(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.Model = (global::OxyPlot.PlotModel)Value;
        }
        private object get_1_PlotView_Controller(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.Controller;
        }
        private void set_1_PlotView_Controller(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.Controller = (global::OxyPlot.IPlotController)Value;
        }
        private object get_2_PlotView_DefaultTrackerTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.DefaultTrackerTemplate;
        }
        private void set_2_PlotView_DefaultTrackerTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.DefaultTrackerTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_3_PlotView_HandleRightClicks(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.HandleRightClicks;
        }
        private void set_3_PlotView_HandleRightClicks(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.HandleRightClicks = (global::System.Boolean)Value;
        }
        private object get_4_PlotView_IsMouseWheelEnabled(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.IsMouseWheelEnabled;
        }
        private void set_4_PlotView_IsMouseWheelEnabled(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.IsMouseWheelEnabled = (global::System.Boolean)Value;
        }
        private object get_5_PlotView_ZoomRectangleTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ZoomRectangleTemplate;
        }
        private void set_5_PlotView_ZoomRectangleTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.ZoomRectangleTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_6_PlotView_TrackerDefinitions(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.TrackerDefinitions;
        }
        private object get_7_TrackerDefinition_TrackerKey(object instance)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            return that.TrackerKey;
        }
        private void set_7_TrackerDefinition_TrackerKey(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            that.TrackerKey = (global::System.String)Value;
        }
        private object get_8_TrackerDefinition_TrackerTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            return that.TrackerTemplate;
        }
        private void set_8_TrackerDefinition_TrackerTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            that.TrackerTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_9_PlotView_ActualModel(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ActualModel;
        }
        private object get_10_PlotView_ClientArea(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ClientArea;
        }
        private object get_11_PlotView_ActualController(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ActualController;
        }
        private object get_12_PressureDisplayPage_GripRightPoint_1(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripRightPoint_1;
        }
        private void set_12_PressureDisplayPage_GripRightPoint_1(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripRightPoint_1 = (global::System.Int32)Value;
        }
        private object get_13_PressureDisplayPage_GripRightPoint_2(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripRightPoint_2;
        }
        private void set_13_PressureDisplayPage_GripRightPoint_2(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripRightPoint_2 = (global::System.Int32)Value;
        }
        private object get_14_PressureDisplayPage_GripRightPoint_3(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripRightPoint_3;
        }
        private void set_14_PressureDisplayPage_GripRightPoint_3(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripRightPoint_3 = (global::System.Int32)Value;
        }
        private object get_15_PressureDisplayPage_GripRightPoint_4(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripRightPoint_4;
        }
        private void set_15_PressureDisplayPage_GripRightPoint_4(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripRightPoint_4 = (global::System.Int32)Value;
        }
        private object get_16_PressureDisplayPage_GripLeftPoint_5(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripLeftPoint_5;
        }
        private void set_16_PressureDisplayPage_GripLeftPoint_5(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripLeftPoint_5 = (global::System.Int32)Value;
        }
        private object get_17_PressureDisplayPage_GripLeftPoint_6(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripLeftPoint_6;
        }
        private void set_17_PressureDisplayPage_GripLeftPoint_6(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripLeftPoint_6 = (global::System.Int32)Value;
        }
        private object get_18_PressureDisplayPage_GripLeftPoint_7(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripLeftPoint_7;
        }
        private void set_18_PressureDisplayPage_GripLeftPoint_7(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripLeftPoint_7 = (global::System.Int32)Value;
        }
        private object get_19_PressureDisplayPage_GripLeftPoint_8(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripLeftPoint_8;
        }
        private void set_19_PressureDisplayPage_GripLeftPoint_8(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripLeftPoint_8 = (global::System.Int32)Value;
        }
        private object get_20_PressureDisplayPage_GripLeft(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripLeft;
        }
        private void set_20_PressureDisplayPage_GripLeft(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripLeft = (global::System.Int32)Value;
        }
        private object get_21_PressureDisplayPage_GripRight(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.GripRight;
        }
        private void set_21_PressureDisplayPage_GripRight(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.GripRight = (global::System.Int32)Value;
        }
        private object get_22_PressureDisplayPage_Seat(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.Seat;
        }
        private void set_22_PressureDisplayPage_Seat(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.Seat = (global::System.Int32)Value;
        }
        private object get_23_PressureDisplayPage_PedalLeft(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.PedalLeft;
        }
        private void set_23_PressureDisplayPage_PedalLeft(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.PedalLeft = (global::System.Int32)Value;
        }
        private object get_24_PressureDisplayPage_PedalRight(object instance)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            return that.PedalRight;
        }
        private void set_24_PressureDisplayPage_PedalRight(object instance, object Value)
        {
            var that = (global::iTec_uwp.PressureDisplayPage)instance;
            that.PedalRight = (global::System.Int32)Value;
        }
        private object get_25_RadialProgressBar_Thickness(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            return that.Thickness;
        }
        private void set_25_RadialProgressBar_Thickness(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            that.Thickness = (global::System.Double)Value;
        }
        private object get_26_RadialProgressBar_Outline(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            return that.Outline;
        }
        private void set_26_RadialProgressBar_Outline(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar)instance;
            that.Outline = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_27_UniformGrid_Columns(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Columns;
        }
        private void set_27_UniformGrid_Columns(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Columns = (global::System.Int32)Value;
        }
        private object get_28_UniformGrid_FirstColumn(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.FirstColumn;
        }
        private void set_28_UniformGrid_FirstColumn(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.FirstColumn = (global::System.Int32)Value;
        }
        private object get_29_UniformGrid_Orientation(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Orientation;
        }
        private void set_29_UniformGrid_Orientation(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_30_UniformGrid_Rows(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Rows;
        }
        private void set_30_UniformGrid_Rows(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Rows = (global::System.Int32)Value;
        }
        private object get_31_UniformGrid_AutoLayout(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.GetAutoLayout((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_31_UniformGrid_AutoLayout(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.SetAutoLayout((global::Windows.UI.Xaml.FrameworkElement)instance, (global::System.Nullable<global::System.Boolean>)Value);
        }
        private object get_32_NullableBool_Value(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.Value;
        }
        private void set_32_NullableBool_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.Value = (global::System.Boolean)Value;
        }
        private object get_33_NullableBool_IsNull(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.IsNull;
        }
        private void set_33_NullableBool_IsNull(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.IsNull = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember xamlMember = null;
            global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "OxyPlot.Windows.PlotView.Model":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Model", "OxyPlot.PlotModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_PlotView_Model;
                xamlMember.Setter = set_0_PlotView_Model;
                break;
            case "OxyPlot.Windows.PlotView.Controller":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Controller", "OxyPlot.IPlotController");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_PlotView_Controller;
                xamlMember.Setter = set_1_PlotView_Controller;
                break;
            case "OxyPlot.Windows.PlotView.DefaultTrackerTemplate":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "DefaultTrackerTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_PlotView_DefaultTrackerTemplate;
                xamlMember.Setter = set_2_PlotView_DefaultTrackerTemplate;
                break;
            case "OxyPlot.Windows.PlotView.HandleRightClicks":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "HandleRightClicks", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_PlotView_HandleRightClicks;
                xamlMember.Setter = set_3_PlotView_HandleRightClicks;
                break;
            case "OxyPlot.Windows.PlotView.IsMouseWheelEnabled":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "IsMouseWheelEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_PlotView_IsMouseWheelEnabled;
                xamlMember.Setter = set_4_PlotView_IsMouseWheelEnabled;
                break;
            case "OxyPlot.Windows.PlotView.ZoomRectangleTemplate":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "ZoomRectangleTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_PlotView_ZoomRectangleTemplate;
                xamlMember.Setter = set_5_PlotView_ZoomRectangleTemplate;
                break;
            case "OxyPlot.Windows.PlotView.TrackerDefinitions":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "TrackerDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>");
                xamlMember.Getter = get_6_PlotView_TrackerDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.TrackerDefinition.TrackerKey":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.TrackerDefinition");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "TrackerKey", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_TrackerDefinition_TrackerKey;
                xamlMember.Setter = set_7_TrackerDefinition_TrackerKey;
                break;
            case "OxyPlot.Windows.TrackerDefinition.TrackerTemplate":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.TrackerDefinition");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "TrackerTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_TrackerDefinition_TrackerTemplate;
                xamlMember.Setter = set_8_TrackerDefinition_TrackerTemplate;
                break;
            case "OxyPlot.Windows.PlotView.ActualModel":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "ActualModel", "OxyPlot.PlotModel");
                xamlMember.Getter = get_9_PlotView_ActualModel;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.PlotView.ClientArea":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "ClientArea", "OxyPlot.OxyRect");
                xamlMember.Getter = get_10_PlotView_ClientArea;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.PlotView.ActualController":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "ActualController", "OxyPlot.IPlotController");
                xamlMember.Getter = get_11_PlotView_ActualController;
                xamlMember.SetIsReadOnly();
                break;
            case "iTec_uwp.PressureDisplayPage.GripRightPoint_1":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripRightPoint_1", "Int32");
                xamlMember.Getter = get_12_PressureDisplayPage_GripRightPoint_1;
                xamlMember.Setter = set_12_PressureDisplayPage_GripRightPoint_1;
                break;
            case "iTec_uwp.PressureDisplayPage.GripRightPoint_2":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripRightPoint_2", "Int32");
                xamlMember.Getter = get_13_PressureDisplayPage_GripRightPoint_2;
                xamlMember.Setter = set_13_PressureDisplayPage_GripRightPoint_2;
                break;
            case "iTec_uwp.PressureDisplayPage.GripRightPoint_3":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripRightPoint_3", "Int32");
                xamlMember.Getter = get_14_PressureDisplayPage_GripRightPoint_3;
                xamlMember.Setter = set_14_PressureDisplayPage_GripRightPoint_3;
                break;
            case "iTec_uwp.PressureDisplayPage.GripRightPoint_4":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripRightPoint_4", "Int32");
                xamlMember.Getter = get_15_PressureDisplayPage_GripRightPoint_4;
                xamlMember.Setter = set_15_PressureDisplayPage_GripRightPoint_4;
                break;
            case "iTec_uwp.PressureDisplayPage.GripLeftPoint_5":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripLeftPoint_5", "Int32");
                xamlMember.Getter = get_16_PressureDisplayPage_GripLeftPoint_5;
                xamlMember.Setter = set_16_PressureDisplayPage_GripLeftPoint_5;
                break;
            case "iTec_uwp.PressureDisplayPage.GripLeftPoint_6":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripLeftPoint_6", "Int32");
                xamlMember.Getter = get_17_PressureDisplayPage_GripLeftPoint_6;
                xamlMember.Setter = set_17_PressureDisplayPage_GripLeftPoint_6;
                break;
            case "iTec_uwp.PressureDisplayPage.GripLeftPoint_7":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripLeftPoint_7", "Int32");
                xamlMember.Getter = get_18_PressureDisplayPage_GripLeftPoint_7;
                xamlMember.Setter = set_18_PressureDisplayPage_GripLeftPoint_7;
                break;
            case "iTec_uwp.PressureDisplayPage.GripLeftPoint_8":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripLeftPoint_8", "Int32");
                xamlMember.Getter = get_19_PressureDisplayPage_GripLeftPoint_8;
                xamlMember.Setter = set_19_PressureDisplayPage_GripLeftPoint_8;
                break;
            case "iTec_uwp.PressureDisplayPage.GripLeft":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripLeft", "Int32");
                xamlMember.Getter = get_20_PressureDisplayPage_GripLeft;
                xamlMember.Setter = set_20_PressureDisplayPage_GripLeft;
                break;
            case "iTec_uwp.PressureDisplayPage.GripRight":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "GripRight", "Int32");
                xamlMember.Getter = get_21_PressureDisplayPage_GripRight;
                xamlMember.Setter = set_21_PressureDisplayPage_GripRight;
                break;
            case "iTec_uwp.PressureDisplayPage.Seat":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Seat", "Int32");
                xamlMember.Getter = get_22_PressureDisplayPage_Seat;
                xamlMember.Setter = set_22_PressureDisplayPage_Seat;
                break;
            case "iTec_uwp.PressureDisplayPage.PedalLeft":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "PedalLeft", "Int32");
                xamlMember.Getter = get_23_PressureDisplayPage_PedalLeft;
                xamlMember.Setter = set_23_PressureDisplayPage_PedalLeft;
                break;
            case "iTec_uwp.PressureDisplayPage.PedalRight":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iTec_uwp.PressureDisplayPage");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "PedalRight", "Int32");
                xamlMember.Getter = get_24_PressureDisplayPage_PedalRight;
                xamlMember.Setter = set_24_PressureDisplayPage_PedalRight;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar.Thickness":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Thickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_RadialProgressBar_Thickness;
                xamlMember.Setter = set_25_RadialProgressBar_Thickness;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar.Outline":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.RadialProgressBar");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Outline", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_RadialProgressBar_Outline;
                xamlMember.Setter = set_26_RadialProgressBar_Outline;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Columns":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Columns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_UniformGrid_Columns;
                xamlMember.Setter = set_27_UniformGrid_Columns;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.FirstColumn":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "FirstColumn", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_UniformGrid_FirstColumn;
                xamlMember.Setter = set_28_UniformGrid_FirstColumn;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Orientation":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_UniformGrid_Orientation;
                xamlMember.Setter = set_29_UniformGrid_Orientation;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Rows":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Rows", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_UniformGrid_Rows;
                xamlMember.Setter = set_30_UniformGrid_Rows;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.AutoLayout":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "AutoLayout", "System.Nullable`1<Boolean>");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_31_UniformGrid_AutoLayout;
                xamlMember.Setter = set_31_UniformGrid_AutoLayout;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.Value":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "Value", "Boolean");
                xamlMember.Getter = get_32_NullableBool_Value;
                xamlMember.Setter = set_32_NullableBool_Value;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.IsNull":
                userType = (global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlMember(this, "IsNull", "Boolean");
                xamlMember.Getter = get_33_NullableBool_IsNull;
                xamlMember.Setter = set_33_NullableBool_IsNull;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlSystemBaseType
    {
        global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::iTec_uwp.iTec_uwp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

